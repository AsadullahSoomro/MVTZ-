import 'package:flutter/material.dart';
import 'package:mvtz/referral_screen.dart';
import 'package:mvtz/roadmap_screen.dart';
import 'package:mvtz/task_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'games_screen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MVTZ Mining Bot',
      theme: ThemeData(
        primaryColor: const Color(0xFF4A148C),
        brightness: Brightness.dark,
        textTheme: const TextTheme(
          titleLarge: TextStyle(
            color: Colors.white,
            fontFamily: 'Montserrat',
            fontWeight: FontWeight.bold,
          ),
          bodyMedium: TextStyle(
            color: Colors.white70,
            fontFamily: 'Montserrat',
          ),
        ),
        buttonTheme: ButtonThemeData(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          buttonColor: Colors.amber,
          splashColor: Colors.amberAccent,
        ),
        iconTheme: const IconThemeData(color: Colors.amberAccent),
      ),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  double _points = 39.5;
  static const double dailyLimit = 1000.0;
  int _rechargesLeft = 0; // Example with no recharges left
  bool _showPlusOne = false;
  late AnimationController _animationController;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _loadPoints();

    _animationController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    );

    _animation = Tween<double>(begin: 0, end: -50).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeOut,
      ),
    );
  }

  Future<void> _loadPoints() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _points = prefs.getDouble('points') ?? 0.0;
      _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
    });
  }

  Future<void> _savePoints() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble('points', _points);
    await prefs.setInt('rechargesLeft', _rechargesLeft);
  }

  void _mineCoin() {
    if (_points + 0.5 <= dailyLimit) {
      setState(() {
        _points += 0.5; // Increment points by 0.5 for mining action
        _showPlusOne = true;
      });
      _animationController.reset();
      _animationController.forward().then((_) {
        setState(() {
          _showPlusOne = false;
        });
      });
      _savePoints(); // Save points after each increment
    } else {
      setState(() {
        _points = dailyLimit; // Cap at the daily limit
      });
      _savePoints(); // Save points even if it's capped
    }
  }

  void _rechargeEnergy() {
    if (_rechargesLeft > 0) {
      setState(() {
        _points = 0.0; // Reset points
        _rechargesLeft--; // Decrease recharge count
      });
      _savePoints();
    }
  }

  // Deduct 1000 points when increasing points

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final double logoSize = screenWidth * 0.8;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Row(
          children: [
            ClipOval(
              child: Image.asset(
                'assets/mvtz_logo1.png',
                height: 40,
                width: 40,
                fit: BoxFit.cover,
              ),
            ),
            const SizedBox(width: 10),
            const Text(
              'MVTZ Mining Bot',
              style: TextStyle(
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold,
                fontSize: 20,
              ),
            ),
          ],
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFFd4af37), Color(0xff8a6231)], // Dark Green Gradient
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            GestureDetector(
              onTap: _mineCoin,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  CircleAvatar(
                    radius: logoSize / 2,
                    backgroundColor: Colors.transparent, // Circle background color
                    child: ClipOval(
                      child: Image.asset(
                        'assets/mvtz_logo.png',
                        width: logoSize,
                        height: logoSize,
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                  if (_showPlusOne)
                    Positioned(
                      bottom: _animation.value,
                      child: const Text(
                        '+0.5',
                        style: TextStyle(
                          color: Colors.yellow,
                          fontSize: 30,
                          fontWeight: FontWeight.bold,
                          shadows: [
                            Shadow(
                              blurRadius: 10,
                              color: Colors.black,
                              offset: Offset(0, 2),
                            ),
                          ],
                        ),
                      ),
                    ),
                ],
              ),
            ),
            const SizedBox(height: 10),

            // Points Display with daily limit info and recharge option
            Container(
              padding: const EdgeInsets.all(20.0),
              decoration: BoxDecoration(
                color: Colors.black87,
                borderRadius: BorderRadius.circular(15),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.black54,
                    offset: Offset(0, 4),
                    blurRadius: 10,
                  ),
                ],
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'Points: $_points / $dailyLimit', // Display current points with daily limit
                        style: const TextStyle(
                          color: Colors.yellow,
                          fontSize: 28,
                          fontFamily: 'Montserrat',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Stack(
                    children: [
                      LinearProgressIndicator(
                        value: _points / dailyLimit,
                        minHeight: 22,
                        backgroundColor: Colors.white30,
                        color: Colors.yellow,
                      ),
                      Positioned(
                        top: 5,
                        left: 10,
                        child: Row(
                          children: [
                            const Icon(Icons.bolt, color: Colors.teal, size: 18),
                            Text(
                              '${_points.toInt()}/$dailyLimit',
                              style: const TextStyle(
                                color: Colors.amber,
                                fontSize: 16,
                                fontFamily: 'Montserrat',
                              ),
                            ),
                          ],
                        ),
                      ),
                      Positioned(
                        right: 10,
                        child: GestureDetector(
                          onTap: _rechargesLeft > 0 ? _rechargeEnergy : null,
                          child: Row(
                            children: [
                              Text(
                                'Increase',
                                style: TextStyle(
                                  color: _rechargesLeft > 0 ? Colors.yellow : Colors.white54,
                                  fontSize: 16,
                                  fontFamily: 'Montserrat',
                                ),
                              ),
                              const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.yellow),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Text(
                    'Recharges Left: $_rechargesLeft', // Display remaining recharges
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontFamily: 'Montserrat',
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 5),

            // Options Display with light yellow gradient
            Expanded(
              child: GridView.count(
                crossAxisCount: 2,
                crossAxisSpacing: 18,
                mainAxisSpacing: 15,
                childAspectRatio: 1.3,
                children: [
                  _buildOptionCard(
                    'Task',
                    Icons.assignment,
                        () => Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => const TaskScreen()),
                    ),
                  ),
                  _buildOptionCard(
                    'Games',
                    Icons.videogame_asset,
                        () => Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => const GamesScreen()),
                    ),
                  ),
                  _buildOptionCard(
                    'Roadmap',
                    Icons.map,
                        () => Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => const RoadmapScreen()),
                    ),
                  ),
                  _buildOptionCard(
                    'Referral',
                    Icons.group,
                        () => Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => const ReferralScreen()),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Method to build Option Cards
  Widget _buildOptionCard(String title, IconData icon, VoidCallback onTap) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [Colors.amber, Colors.amber],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(12),
          boxShadow: const [
            BoxShadow(
              color: Colors.black45,
              offset: Offset(2, 2),
              blurRadius: 5,
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 50, color: Colors.white),
            const SizedBox(height: 10),
            Text(
              title,
              style: const TextStyle(
                fontFamily: 'Montserrat',
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

import 'package:flutter/material.dart';
import 'package:mvtz/referral_screen.dart';
import 'package:mvtz/roadmap_screen.dart';
import 'package:mvtz/task_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'games_screen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MVTZ Mining Bot',
      theme: ThemeData(
        primaryColor: const Color(0xFF4A148C),
        brightness: Brightness.dark,
        textTheme: const TextTheme(
          titleLarge: TextStyle(
            color: Colors.white,
            fontFamily: 'Montserrat',
            fontWeight: FontWeight.bold,
          ),
          bodyMedium: TextStyle(
            color: Colors.white70,
            fontFamily: 'Montserrat',
          ),
        ),
        buttonTheme: ButtonThemeData(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          buttonColor: Colors.amber,
          splashColor: Colors.amberAccent,
        ),
        iconTheme: const IconThemeData(color: Colors.amberAccent),
      ),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  double _points = 39.5;
  static const double dailyLimit = 1000.0;
  int _rechargesLeft = 0; // Example with no recharges left
  bool _showPlusOne = false;
  late AnimationController _animationController;
  late Animation<double> _animation;
  late Animation<double> _bounceAnimation;

  @override
  void initState() {
    super.initState();
    _loadPoints();

    _animationController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    );

    _animation = Tween<double>(begin: 0, end: -50).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeInOut,
      ),
    );

    _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.bounceOut,
      ),
    );
  }

  Future<void> _loadPoints() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _points = prefs.getDouble('points') ?? 0.0;
      _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
    });
  }

  Future<void> _savePoints() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble('points', _points);
    await prefs.setInt('rechargesLeft', _rechargesLeft);
  }

  void _mineCoin() {
    if (_points + 0.5 <= dailyLimit) {
      setState(() {
        _points += 0.5; // Increment points by 0.5 for mining action
        _showPlusOne = true;
      });
      _animationController.reset();
      _animationController.forward().then((_) {
        setState(() {
          _showPlusOne = false;
        });
      });
      _savePoints(); // Save points after each increment
    } else {
      setState(() {
        _points = dailyLimit; // Cap at the daily limit
      });
      _savePoints(); // Save points even if it's capped
    }
  }

  void _rechargeEnergy() {
    if (_rechargesLeft > 0) {
      setState(() {
        _points = 0.0; // Reset points
        _rechargesLeft--; // Decrease recharge count
      });
      _savePoints();
    }
  }

  // Deduct 1000 points when increasing points
  void _increasePoints() {
    if (_points >= 1000) {
      setState(() {
        _points -= 1000; // Deduct 1000 points
      });
      _savePoints(); // Save points after deduction
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final double logoSize = screenWidth * 0.8;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Row(
          children: [
            ClipOval(
              child: Image.asset(
                'assets/mvtz_logo1.png',
                height: 40,
                width: 40,
                fit: BoxFit.cover,
              ),
            ),
            const SizedBox(width: 10),
            const Text(
              'MVTZ Mining Bot',
              style: TextStyle(
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold,
                fontSize: 20,
              ),
            ),
          ],
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFFd4af37), Color(0xff8a6231)], // Dark Green Gradient
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            GestureDetector(
              onTap: _mineCoin,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  CircleAvatar(
                    radius: logoSize / 2,
                    backgroundColor: Colors.transparent, // Circle background color
                    child: ClipOval(
                      child: Image.asset(
                        'assets/mvtz_logo.png',
                        width: logoSize,
                        height: logoSize,
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                  if (_showPlusOne)
                    Positioned(
                      bottom: _animation.value + _bounceAnimation.value,
                      child: const Text(
                        '+0.5',
                        style: TextStyle(
                          color: Colors.yellow,
                          fontSize: 30,
                          fontWeight: FontWeight.bold,
                          shadows: [
                            Shadow(
                              blurRadius: 10,
                              color: Colors.black,
                              offset: Offset(0, 2),
                            ),
                          ],
                        ),
                      ),
                    ),
                ],
              ),
            ),
            const SizedBox(height: 1),

            // Points Display with daily limit info and recharge option
            Container(
              padding: const EdgeInsets.all(20.0),
              decoration: BoxDecoration(
                color: Colors.black87,
                borderRadius: BorderRadius.circular(15),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.black54,
                    offset: Offset(0, 4),
                    blurRadius: 10,
                  ),
                ],
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'Points: $_points / $dailyLimit', // Display current points with daily limit
                        style: const TextStyle(
                          color: Colors.yellow,
                          fontSize: 28,
                          fontFamily: 'Montserrat',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 1),
                  Stack(
                    children: [
                      LinearProgressIndicator(
                        value: _points / dailyLimit,
                        minHeight: 22,
                        backgroundColor: Colors.white30,
                        color: Colors.yellow,
                      ),
                      Positioned(
                        top: 1,
                        left: 10,
                        child: Row(
                          children: [
                            Icon(Icons.bolt, color: Colors.teal, size: 18),
                            Text(
                              '${_points.toInt()}/$dailyLimit',
                              style: const TextStyle(
                                color: Colors.amber,
                                fontSize: 16,
                                fontFamily: 'Montserrat',
                              ),
                            ),
                          ],
                        ),
                      ),
                      Positioned(
                        right: 10,
                        child: GestureDetector(
                          onTap: _rechargesLeft > 0 ? _rechargeEnergy : null,
                          child: Row(
                            children: [
                              Text(
                                'Increase',
                                style: TextStyle(
                                  color: _rechargesLeft > 0 ? Colors.yellow : Colors.white54,
                                  fontSize: 16,
                                  fontFamily: 'Montserrat',
                                ),
                              ),
                              const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.yellow),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 1),
                  Text(
                    'Recharges Left: $_rechargesLeft', // Display remaining recharges
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontFamily: 'Montserrat',
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 5),

            // Options Display with light yellow gradient
            Expanded(
              child: GridView.count(
                crossAxisCount: 2,
                crossAxisSpacing: 18,
                mainAxisSpacing: 15,
                childAspectRatio: 1.3,
                children: [
                  _buildOptionCard(
                    'Task',
                    Icons.assignment,
                        () => Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => const TaskScreen()),
                    ),
                  ),
                  _buildOptionCard(
                    'Games',
                    Icons.videogame_asset,
                        () => Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => const GamesScreen()),
                    ),
                  ),
                  _buildOptionCard(
                    'Roadmap',
                    Icons.map,
                        () => Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => const RoadmapScreen()),
                    ),
                  ),
                  _buildOptionCard(
                    'Referral',
                    Icons.share,
                        () => Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => const ReferralScreen()),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOptionCard(String title, IconData icon, VoidCallback onTap) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [Color(0xFFFBC02D), Color(0xFFFFF176)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(12),
          boxShadow: const [
            BoxShadow(
              color: Colors.black54,
              offset: Offset(0, 2),
              blurRadius: 5,
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 45, color: Colors.brown[800]),
            const SizedBox(height: 6),
            Text(
              title,
              style: TextStyle(
                color: Colors.brown[800],
                fontSize: 18,
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}






// import 'package:flutter/material.dart';
// import 'package:mvtz/referral_screen.dart';
// import 'package:mvtz/roadmap_screen.dart';
// import 'package:mvtz/task_screen.dart';
// import 'package:shared_preferences/shared_preferences.dart';
// import 'games_screen.dart';
//
// void main() {
//   runApp(const MyApp());
// }
//
// class MyApp extends StatelessWidget {
//   const MyApp({super.key});
//
//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       title: 'MVTZ Mining Bot',
//       theme: ThemeData(
//         primaryColor: const Color(0xFF4A148C),
//         brightness: Brightness.dark,
//         textTheme: const TextTheme(
//           titleLarge: TextStyle(
//             color: Colors.white,
//             fontFamily: 'Montserrat',
//             fontWeight: FontWeight.bold,
//           ),
//           bodyMedium: TextStyle(
//             color: Colors.white70,
//             fontFamily: 'Montserrat',
//           ),
//         ),
//         buttonTheme: ButtonThemeData(
//           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
//           buttonColor: Colors.amber,
//           splashColor: Colors.amberAccent,
//         ),
//         iconTheme: const IconThemeData(color: Colors.amberAccent),
//       ),
//       home: const HomeScreen(),
//     );
//   }
// }
//
// class HomeScreen extends StatefulWidget {
//   const HomeScreen({super.key});
//
//   @override
//   _HomeScreenState createState() => _HomeScreenState();
// }
//
// class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
//   double _points = 39.5;
//   static const double dailyLimit = 1000.0;
//   int _rechargesLeft = 0; // Example with no recharges left
//   bool _showPlusOne = false;
//   late AnimationController _animationController;
//   late Animation<double> _animation;
//   late Animation<double> _bounceAnimation;
//
//   @override
//   void initState() {
//     super.initState();
//     _loadPoints();
//
//     _animationController = AnimationController(
//       duration: const Duration(seconds: 1),
//       vsync: this,
//     );
//
//     _animation = Tween<double>(begin: 0, end: -50).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.easeInOut,
//       ),
//     );
//
//     _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.bounceOut,
//       ),
//     );
//   }
//
//   Future<void> _loadPoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     setState(() {
//       _points = prefs.getDouble('points') ?? 0.0;
//       _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
//     });
//   }
//
//   Future<void> _savePoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     await prefs.setDouble('points', _points);
//     await prefs.setInt('rechargesLeft', _rechargesLeft);
//   }
//
//   void _mineCoin() {
//     if (_points + 0.5 <= dailyLimit) {
//       setState(() {
//         _points += 0.5; // Increment points by 0.5 for mining action
//         _showPlusOne = true;
//       });
//       _animationController.reset();
//       _animationController.forward().then((_) {
//         setState(() {
//           _showPlusOne = false;
//         });
//       });
//       _savePoints(); // Save points after each increment
//     } else {
//       setState(() {
//         _points = dailyLimit; // Cap at the daily limit
//       });
//       _savePoints(); // Save points even if it's capped
//     }
//   }
//
//   void _rechargeEnergy() {
//     if (_rechargesLeft > 0) {
//       setState(() {
//         _points = 0.0; // Reset points
//         _rechargesLeft--; // Decrease recharge count
//       });
//       _savePoints();
//     }
//   }
//
//   @override
//   void dispose() {
//     _animationController.dispose();
//     super.dispose();
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final double screenWidth = MediaQuery.of(context).size.width;
//     final double logoSize = screenWidth * 0.8;
//
//     return Scaffold(
//       appBar: AppBar(
//         backgroundColor: Colors.transparent,
//         elevation: 0,
//         title: Row(
//           children: [
//             ClipOval(
//               child: Image.asset(
//                 'assets/mvtz_logo1.png',
//                 height: 40,
//                 width: 40,
//                 fit: BoxFit.cover,
//               ),
//             ),
//             const SizedBox(width: 10),
//             const Text(
//               'MVTZ Mining Bot',
//               style: TextStyle(
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//                 fontSize: 20,
//               ),
//             ),
//           ],
//         ),
//       ),
//       body: Container(
//         decoration: const BoxDecoration(
//           gradient: LinearGradient(
//             colors: [Color(0xFFd4af37), Color(0xff8a6231)], // Dark Green Gradient
//             // Color(0xFFd4af37), // Golden color
//             // Color(0xFFb8860b), // Darker golden brown color
//
//             begin: Alignment.topLeft,
//             end: Alignment.bottomRight,
//           ),
//         ),
//         padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.center,
//           children: [
//             GestureDetector(
//               onTap: _mineCoin,
//               child: Stack(
//                 alignment: Alignment.center,
//                 children: [
//                   CircleAvatar(
//                     radius: logoSize / 2,
//                     backgroundColor: Colors.transparent, // Circle background color
//                     child: ClipOval(
//                       child: Image.asset(
//                         'assets/mvtz_logo.png',
//                         width: logoSize,
//                         height: logoSize,
//                         fit: BoxFit.contain,
//                       ),
//                     ),
//                   ),
//                   if (_showPlusOne)
//                     Positioned(
//                       bottom: _animation.value + _bounceAnimation.value,
//                       child: const Text(
//                         '+0.5',
//                         style: TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 30,
//                           fontWeight: FontWeight.bold,
//                           shadows: [
//                             Shadow(
//                               blurRadius: 10,
//                               color: Colors.black,
//                               offset: Offset(0, 2),
//                             ),
//                           ],
//                         ),
//                       ),
//                     ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 1),
//
//             // Points Display with daily limit info and recharge option
//             Container(
//               padding: const EdgeInsets.all(20.0),
//               decoration: BoxDecoration(
//                 color: Colors.black87,
//                 borderRadius: BorderRadius.circular(15),
//                 boxShadow: const [
//                   BoxShadow(
//                     color: Colors.black54,
//                     offset: Offset(0, 4),
//                     blurRadius: 10,
//                   ),
//                 ],
//               ),
//               child: Column(
//                 children: [
//                   Row(
//                     mainAxisAlignment: MainAxisAlignment.center,
//                     children: [
//                       Text(
//                         'Points: $_points / $dailyLimit', // Display current points with daily limit
//                         style: const TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 28,
//                           fontFamily: 'Montserrat',
//                           fontWeight: FontWeight.bold,
//                         ),
//                       ),
//                     ],
//                   ),
//                   const SizedBox(height: 1),
//                   Stack(
//                     children: [
//                       LinearProgressIndicator(
//                         value: _points / dailyLimit,
//                         minHeight: 22,
//                         backgroundColor: Colors.white30,
//                         color: Colors.yellow,
//                       ),
//                       Positioned(
//                         top: 1,
//                         left: 10,
//                         child: Row(
//                           children: [
//                             Icon(Icons.bolt, color: Colors.teal, size: 18),
//                             Text(
//                               '${_points.toInt()}/$dailyLimit',
//                               style: const TextStyle(
//                                 color: Colors.amber,
//                                 fontSize: 16,
//                                 fontFamily: 'Montserrat',
//                               ),
//                             ),
//                           ],
//                         ),
//                       ),
//                       Positioned(
//                         right: 10,
//                         child: GestureDetector(
//                           onTap: _rechargesLeft > 0 ? _rechargeEnergy : null,
//                           child: Row(
//                             children: [
//                               Text(
//                                 'Increase',
//                                 style: TextStyle(
//                                   color: _rechargesLeft > 0 ? Colors.yellow : Colors.white54,
//                                   fontSize: 16,
//                                   fontFamily: 'Montserrat',
//                                 ),
//                               ),
//                               const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.yellow),
//                             ],
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                   const SizedBox(height: 1),
//                   Text(
//                     'Recharges Left: $_rechargesLeft', // Display remaining recharges
//                     style: const TextStyle(
//                       color: Colors.white,
//                       fontSize: 20,
//                       fontFamily: 'Montserrat',
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 5),
//
//             // Options Display with light yellow gradient
//             Expanded(
//               child: GridView.count(
//                 crossAxisCount: 2,
//                 crossAxisSpacing: 15,
//                 mainAxisSpacing: 15,
//                 childAspectRatio: 1.8,
//                 padding: const EdgeInsets.all(5),
//                 children: [
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/task.png',
//                     label: 'Task',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const TaskScreen()),
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/mining.png',
//                     label: 'Games',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const GamesScreen()),
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/roadmap.png',
//                     label: 'Roadmap',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const RoadmapScreen()),
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/referral.png',
//                     label: 'Referral',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const ReferralScreen()), // Navigate to ReferralScreen
//                       );
//                     },
//                   ),
//                 ],
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
//
//   Widget _buildOption(BuildContext context,
//       {required String imagePath, required String label, required VoidCallback onPressed}) {
//     return GestureDetector(
//       onTap: onPressed,
//       child: Container(
//         decoration: BoxDecoration(
//           gradient: const LinearGradient(
//             colors: [Colors.yellowAccent, Colors.orangeAccent],
//             begin: Alignment.topLeft,
//             end: Alignment.bottomRight,
//           ),
//           borderRadius: BorderRadius.circular(20),
//           boxShadow: const [
//             BoxShadow(
//               color: Colors.black26,
//               blurRadius: 9,
//             ),
//           ],
//         ),
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           children: [
//             Image.asset(imagePath, height: 35),
//             // Image.asset(imagePath, height: 50, color: Colors.black87),
//             const SizedBox(height: 3),
//             Text(
//               label,
//               style: const TextStyle(
//                 color: Colors.black87,
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//                 fontSize: 15,
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }


import 'package:flutter/material.dart';
import 'package:mvtz/referral_screen.dart';
import 'package:mvtz/roadmap_screen.dart';
import 'package:mvtz/task_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'games_screen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MVTZ Mining Bot',
      theme: ThemeData(
        primaryColor: const Color(0xFF4A148C),
        brightness: Brightness.dark,
        textTheme: const TextTheme(
          titleLarge: TextStyle(
            color: Colors.white,
            fontFamily: 'Montserrat',
            fontWeight: FontWeight.bold,
          ),
          bodyMedium: TextStyle(
            color: Colors.white70,
            fontFamily: 'Montserrat',
          ),
        ),
        buttonTheme: ButtonThemeData(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          buttonColor: Colors.amber,
          splashColor: Colors.amberAccent,
        ),
        iconTheme: const IconThemeData(color: Colors.amberAccent),
      ),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  double _points = 39.5;
  static const double dailyLimit = 1000.0;
  int _rechargesLeft = 0; // Example with no recharges left
  bool _showPlusOne = false;
  late AnimationController _animationController;
  late Animation<double> _animation;
  late Animation<double> _bounceAnimation;

  @override
  void initState() {
    super.initState();
    _loadPoints();

    _animationController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    );

    _animation = Tween<double>(begin: 0, end: -50).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeInOut,
      ),
    );

    _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.bounceOut,
      ),
    );
  }

  Future<void> _loadPoints() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _points = prefs.getDouble('points') ?? 0.0;
      _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
    });
  }

  Future<void> _savePoints() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble('points', _points);
    await prefs.setInt('rechargesLeft', _rechargesLeft);
  }

  void _mineCoin() {
    if (_points + 0.5 <= dailyLimit) {
      setState(() {
        _points += 0.5; // Increment points by 0.5 for mining action
        _showPlusOne = true;
      });
      _animationController.reset();
      _animationController.forward().then((_) {
        setState(() {
          _showPlusOne = false;
        });
      });
      _savePoints(); // Save points after each increment
    } else {
      setState(() {
        _points = dailyLimit; // Cap at the daily limit
      });
      _savePoints(); // Save points even if it's capped
    }
  }

  void _rechargeEnergy() {
    if (_rechargesLeft > 0) {
      setState(() {
        _points = 0.0; // Reset points
        _rechargesLeft--; // Decrease recharge count
      });
      _savePoints();
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final double logoSize = screenWidth * 0.7;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Row(
          children: [
            ClipOval(
              child: Image.asset(
                'assets/mvtz_logo1.png',
                height: 40,
                width: 40,
                fit: BoxFit.cover,
              ),
            ),
            const SizedBox(width: 10),
            const Text(
              'MVTZ Mining Bot',
              style: TextStyle(
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold,
                fontSize: 20,
              ),
            ),
          ],
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF004D40), Color(0xFF00796B)], // Dark Green Gradient
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            GestureDetector(
              onTap: _mineCoin,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  CircleAvatar(
                    radius: logoSize / 2,
                    backgroundColor: Colors.black87, // Circle background color
                    child: ClipOval(
                      child: Image.asset(
                        'assets/mvtz_logo.png',
                        width: logoSize,
                        height: logoSize,
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                  if (_showPlusOne)
                    Positioned(
                      bottom: _animation.value + _bounceAnimation.value,
                      child: const Text(
                        '+0.5',
                        style: TextStyle(
                          color: Colors.yellow,
                          fontSize: 30,
                          fontWeight: FontWeight.bold,
                          shadows: [
                            Shadow(
                              blurRadius: 10,
                              color: Colors.black,
                              offset: Offset(0, 2),
                            ),
                          ],
                        ),
                      ),
                    ),
                ],
              ),
            ),
            const SizedBox(height: 5),

            // Points Display with daily limit info and recharge option
            Container(
              padding: const EdgeInsets.all(20.0),
              decoration: BoxDecoration(
                color: Colors.black87,
                borderRadius: BorderRadius.circular(15),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.black54,
                    offset: Offset(0, 4),
                    blurRadius: 5,
                  ),
                ],
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'Points: $_points / $dailyLimit', // Display current points with daily limit
                        style: const TextStyle(
                          color: Colors.yellow,
                          fontSize: 28,
                          fontFamily: 'Montserrat',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 1),
                  Stack(
                    children: [
                      LinearProgressIndicator(
                        value: _points / dailyLimit,
                        minHeight: 22,
                        backgroundColor: Colors.white30,
                        color: Colors.yellow,
                      ),
                      Positioned(
                        top: 1,
                        left: 10,
                        child: Row(
                          children: [
                            Icon(Icons.bolt, color: Colors.teal, size: 18),
                            Text(
                              '${_points.toInt()}/$dailyLimit',
                              style: const TextStyle(
                                color: Colors.amber,
                                fontSize: 16,
                                fontFamily: 'Montserrat',
                              ),
                            ),
                          ],
                        ),
                      ),
                      Positioned(
                        right: 10,
                        child: GestureDetector(
                          onTap: _rechargesLeft > 0 ? _rechargeEnergy : null,
                          child: Row(
                            children: [
                              Text(
                                'Increase',
                                style: TextStyle(
                                  color: _rechargesLeft > 0 ? Colors.yellow : Colors.white54,
                                  fontSize: 16,
                                  fontFamily: 'Montserrat',
                                ),
                              ),
                              const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.yellow),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 1),
                  Text(
                    'Recharges Left: $_rechargesLeft', // Display remaining recharges
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontFamily: 'Montserrat',
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 7),

            // Options Display with light yellow gradient
            Expanded(
              child: GridView.count(
                crossAxisCount: 2,
                crossAxisSpacing: 20,
                mainAxisSpacing: 20,
                childAspectRatio: 1.6,
                padding: const EdgeInsets.all(1.5),
                children: [
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/task.png',
                    label: 'Task',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const TaskScreen()),
                      );
                    },
                  ),
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/mining.png',
                    label: 'Games',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const GamesScreen()),
                      );
                    },
                  ),
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/roadmap.png',
                    label: 'Roadmap',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const RoadmapScreen()),
                      );
                    },
                  ),
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/referral.png',
                    label: 'Referral',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const ReferralScreen()), // Navigate to ReferralScreen
                      );
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOption(BuildContext context,
      {required String imagePath, required String label, required VoidCallback onPressed}) {
    return GestureDetector(
      onTap: onPressed,
      child: Container(
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [Colors.yellowAccent, Colors.orangeAccent],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(15),
          boxShadow: const [
            BoxShadow(
              color: Colors.black26,
              offset: Offset(0, 4),
              blurRadius: 5,
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(imagePath, height: 60),
            // Image.asset(imagePath, height: 50, color: Colors.black87),
            const SizedBox(height: 10),
            Text(
              label,
              style: const TextStyle(
                color: Colors.black87,
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
            ),
          ],
        ),
      ),
    );
  }
}




import 'package:flutter/material.dart';
import 'package:mvtz/referral_screen.dart';
import 'package:mvtz/roadmap_screen.dart';
import 'package:mvtz/task_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'games_screen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MVTZ Mining Bot',
      theme: ThemeData(
        primaryColor: const Color(0xFF4A148C),
        brightness: Brightness.dark,
        textTheme: const TextTheme(
          titleLarge: TextStyle(
            color: Colors.white,
            fontFamily: 'Montserrat',
            fontWeight: FontWeight.bold,
          ),
          bodyMedium: TextStyle(
            color: Colors.white70,
            fontFamily: 'Montserrat',
          ),
        ),
        buttonTheme: ButtonThemeData(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          buttonColor: Colors.amber,
          splashColor: Colors.amberAccent,
        ),
        iconTheme: const IconThemeData(color: Colors.amberAccent),
      ),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  double _points = 39.5;
  static const double dailyLimit = 1000.0;
  int _rechargesLeft = 0; // Example with no recharges left
  bool _showPlusOne = false;
  late AnimationController _animationController;
  late Animation<double> _animation;
  late Animation<double> _bounceAnimation;

  @override
  void initState() {
    super.initState();
    _loadPoints();

    _animationController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    );

    _animation = Tween<double>(begin: 0, end: -50).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeInOut,
      ),
    );

    _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.bounceOut,
      ),
    );
  }

  Future<void> _loadPoints() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _points = prefs.getDouble('points') ?? 0.0;
      _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
    });
  }

  Future<void> _savePoints() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble('points', _points);
    await prefs.setInt('rechargesLeft', _rechargesLeft);
  }

  void _mineCoin() {
    if (_points + 0.5 <= dailyLimit) {
      setState(() {
        _points += 0.5; // Increment points by 0.5 for mining action
        _showPlusOne = true;
      });
      _animationController.reset();
      _animationController.forward().then((_) {
        setState(() {
          _showPlusOne = false;
        });
      });
      _savePoints(); // Save points after each increment
    } else {
      setState(() {
        _points = dailyLimit; // Cap at the daily limit
      });
      _savePoints(); // Save points even if it's capped
    }
  }

  void _rechargeEnergy() {
    if (_rechargesLeft > 0) {
      setState(() {
        _points = 0.0; // Reset points
        _rechargesLeft--; // Decrease recharge count
      });
      _savePoints();
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final double logoSize = screenWidth * 0.5;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Row(
          children: [
            ClipOval(
              child: Image.asset(
                'assets/mvtz_logo1.png',
                height: 40,
                width: 40,
                fit: BoxFit.cover,
              ),
            ),
            const SizedBox(width: 10),
            const Text(
              'MVTZ Mining Bot',
              style: TextStyle(
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold,
                fontSize: 20,
              ),
            ),
          ],
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF004D40), Color(0xFF00796B)], // Dark Green Gradient
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            GestureDetector(
              onTap: _mineCoin,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  CircleAvatar(
                    radius: logoSize / 1.6,
                    backgroundColor: Colors.black87, // Circle background color
                    child: ClipOval(
                      child: Image.asset(
                        'assets/mvtz_logo.png',
                        width: logoSize,
                        height: logoSize,
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                  if (_showPlusOne)
                    Positioned(
                      bottom: _animation.value + _bounceAnimation.value,
                      child: const Text(
                        '+0.5',
                        style: TextStyle(
                          color: Colors.yellow,
                          fontSize: 30,
                          fontWeight: FontWeight.bold,
                          shadows: [
                            Shadow(
                              blurRadius: 10,
                              color: Colors.black,
                              offset: Offset(0, 2),
                            ),
                          ],
                        ),
                      ),
                    ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // Points Display with daily limit info and recharge option
            Container(
              padding: const EdgeInsets.all(20.0),
              decoration: BoxDecoration(
                color: Colors.black87,
                borderRadius: BorderRadius.circular(15),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.black54,
                    offset: Offset(0, 4),
                    blurRadius: 5,
                  ),
                ],
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'Points: $_points / $dailyLimit', // Display current points with daily limit
                        style: const TextStyle(
                          color: Colors.yellow,
                          fontSize: 28,
                          fontFamily: 'Montserrat',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 1),
                  Stack(
                    children: [
                      LinearProgressIndicator(
                        value: _points / dailyLimit,
                        minHeight: 22,
                        backgroundColor: Colors.white30,
                        color: Colors.yellow,
                      ),
                      Positioned(
                        top: 1,
                        left: 10,
                        child: Row(
                          children: [
                            Icon(Icons.bolt, color: Colors.teal, size: 18),
                            Text(
                              '${_points.toInt()}/$dailyLimit',
                              style: const TextStyle(
                                color: Colors.amber,
                                fontSize: 16,
                                fontFamily: 'Montserrat',
                              ),
                            ),
                          ],
                        ),
                      ),
                      Positioned(
                        right: 10,
                        child: GestureDetector(
                          onTap: _rechargesLeft > 0 ? _rechargeEnergy : null,
                          child: Row(
                            children: [
                              Text(
                                'Increase',
                                style: TextStyle(
                                  color: _rechargesLeft > 0 ? Colors.yellow : Colors.white54,
                                  fontSize: 16,
                                  fontFamily: 'Montserrat',
                                ),
                              ),
                              const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.yellow),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 1),
                  Text(
                    'Recharges Left: $_rechargesLeft', // Display remaining recharges
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontFamily: 'Montserrat',
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 7),

            // Options Display with light yellow gradient
            Expanded(
              child: GridView.count(
                crossAxisCount: 2,
                crossAxisSpacing: 20,
                mainAxisSpacing: 20,
                childAspectRatio: 1.6,
                padding: const EdgeInsets.all(1.5),
                children: [
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/task.png',
                    label: 'Task',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const TaskScreen()),
                      );
                    },
                  ),
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/mining.png',
                    label: 'Games',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const GamesScreen()),
                      );
                    },
                  ),
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/roadmap.png',
                    label: 'Roadmap',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const RoadmapScreen()),
                      );
                    },
                  ),
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/referral.png',
                    label: 'Referral',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const ReferralScreen()), // Navigate to ReferralScreen
                      );
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOption(BuildContext context,
      {required String imagePath, required String label, required VoidCallback onPressed}) {
    return GestureDetector(
      onTap: onPressed,
      child: Container(
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [Colors.yellowAccent, Colors.orangeAccent],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(15),
          boxShadow: const [
            BoxShadow(
              color: Colors.black26,
              offset: Offset(0, 4),
              blurRadius: 5,
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(imagePath, height: 60),
            // Image.asset(imagePath, height: 50, color: Colors.black87),
            const SizedBox(height: 10),
            Text(
              label,
              style: const TextStyle(
                color: Colors.black87,
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
            ),
          ],
        ),
      ),
    );
  }
}





import 'package:flutter/material.dart';
import 'package:mvtz/referral_screen.dart';
import 'package:mvtz/roadmap_screen.dart';
import 'package:mvtz/task_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'games_screen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MVTZ Mining Bot',
      theme: ThemeData(
        primaryColor: const Color(0xFF4A148C),
        brightness: Brightness.dark,
        textTheme: const TextTheme(
          titleLarge: TextStyle(
            color: Colors.white,
            fontFamily: 'Montserrat',
            fontWeight: FontWeight.bold,
          ),
          bodyMedium: TextStyle(
            color: Colors.white70,
            fontFamily: 'Montserrat',
          ),
        ),
        buttonTheme: ButtonThemeData(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          buttonColor: Colors.amber,
          splashColor: Colors.amberAccent,
        ),
        iconTheme: const IconThemeData(color: Colors.amberAccent),
      ),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  double _points = 39.5;
  static const double dailyLimit = 1000.0;
  int _rechargesLeft = 0; // Example with no recharges left
  bool _showPlusOne = false;
  late AnimationController _animationController;
  late Animation<double> _animation;
  late Animation<double> _bounceAnimation;

  @override
  void initState() {
    super.initState();
    _loadPoints();

    _animationController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    );

    _animation = Tween<double>(begin: 0, end: -50).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeInOut,
      ),
    );

    _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.bounceOut,
      ),
    );
  }

  Future<void> _loadPoints() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _points = prefs.getDouble('points') ?? 0.0;
      _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
    });
  }

  Future<void> _savePoints() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble('points', _points);
    await prefs.setInt('rechargesLeft', _rechargesLeft);
  }

  void _mineCoin() {
    if (_points + 0.5 <= dailyLimit) {
      setState(() {
        _points += 0.5; // Increment points by 0.5 for mining action
        _showPlusOne = true;
      });
      _animationController.reset();
      _animationController.forward().then((_) {
        setState(() {
          _showPlusOne = false;
        });
      });
      _savePoints(); // Save points after each increment
    } else {
      setState(() {
        _points = dailyLimit; // Cap at the daily limit
      });
      _savePoints(); // Save points even if it's capped
    }
  }

  void _rechargeEnergy() {
    if (_rechargesLeft > 0) {
      setState(() {
        _points = 0.0; // Reset points
        _rechargesLeft--; // Decrease recharge count
      });
      _savePoints();
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final double logoSize = screenWidth * 0.5;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Row(
          children: [
            ClipOval(
              child: Image.asset(
                'assets/mvtz_logo1.png',
                height: 40,
                width: 40,
                fit: BoxFit.cover,
              ),
            ),
            const SizedBox(width: 10),
            const Text(
              'MVTZ Mining Bot',
              style: TextStyle(
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold,
                fontSize: 20,
              ),
            ),
          ],
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF004D40), Color(0xFF00796B)], // Dark Green Gradient
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            GestureDetector(
              onTap: _mineCoin,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  CircleAvatar(
                    radius: logoSize / 1.6,
                    backgroundColor: Colors.black87, // Circle background color
                    child: ClipOval(
                      child: Image.asset(
                        'assets/mvtz_logo.png',
                        width: logoSize,
                        height: logoSize,
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                  if (_showPlusOne)
                    Positioned(
                      bottom: _animation.value + _bounceAnimation.value,
                      child: const Text(
                        '+0.5',
                        style: TextStyle(
                          color: Colors.yellow,
                          fontSize: 30,
                          fontWeight: FontWeight.bold,
                          shadows: [
                            Shadow(
                              blurRadius: 10,
                              color: Colors.black,
                              offset: Offset(0, 2),
                            ),
                          ],
                        ),
                      ),
                    ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // Points Display with daily limit info and recharge option
            Container(
              padding: const EdgeInsets.all(20.0),
              decoration: BoxDecoration(
                color: Colors.black87,
                borderRadius: BorderRadius.circular(15),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.black54,
                    offset: Offset(0, 4),
                    blurRadius: 5,
                  ),
                ],
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'Points: $_points / $dailyLimit', // Display current points with daily limit
                        style: const TextStyle(
                          color: Colors.yellow,
                          fontSize: 28,
                          fontFamily: 'Montserrat',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 1),
                  Stack(
                    children: [
                      LinearProgressIndicator(
                        value: _points / dailyLimit,
                        minHeight: 22,
                        backgroundColor: Colors.white30,
                        color: Colors.yellow,
                      ),
                      Positioned(
                        top: 2,
                        left: 10,
                        child: Row(
                          children: [
                            Icon(Icons.bolt, color: Colors.yellow, size: 18),
                            Text(
                              '${_points.toInt()}/$dailyLimit',
                              style: const TextStyle(
                                color: Colors.amber,
                                fontSize: 16,
                                fontFamily: 'Montserrat',
                              ),
                            ),
                          ],
                        ),
                      ),
                      Positioned(
                        right: 10,
                        child: GestureDetector(
                          onTap: _rechargesLeft > 0 ? _rechargeEnergy : null,
                          child: Row(
                            children: [
                              Text(
                                'Increase',
                                style: TextStyle(
                                  color: _rechargesLeft > 0 ? Colors.yellow : Colors.white54,
                                  fontSize: 16,
                                  fontFamily: 'Montserrat',
                                ),
                              ),
                              const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.yellow),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 1),
                  Text(
                    'Recharges Left: $_rechargesLeft', // Display remaining recharges
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontFamily: 'Montserrat',
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 3),

            // Options Display with light yellow gradient
            Expanded(
              child: GridView.count(
                crossAxisCount: 2,
                crossAxisSpacing: 20,
                mainAxisSpacing: 20,
                childAspectRatio: 1.6,
                padding: const EdgeInsets.all(1.5),
                children: [
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/task.png',
                    label: 'Task',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const TaskScreen()),
                      );
                    },
                  ),
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/mining.png',
                    label: 'Games',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const GamesScreen()),
                      );
                    },
                  ),
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/roadmap.png',
                    label: 'Roadmap',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const RoadmapScreen()),
                      );
                    },
                  ),
                  _buildOption(
                    context,
                    imagePath: 'assets/icons/referral.png',
                    label: 'Referral',
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => const ReferralScreen()), // Navigate to ReferralScreen
                      );
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOption(BuildContext context,
      {required String imagePath, required String label, required VoidCallback onPressed}) {
    return GestureDetector(
      onTap: onPressed,
      child: Container(
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [Colors.yellowAccent, Colors.orangeAccent],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(15),
          boxShadow: const [
            BoxShadow(
              color: Colors.black26,
              offset: Offset(0, 4),
              blurRadius: 5,
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(imagePath, height: 50),
            // Image.asset(imagePath, height: 50, color: Colors.black87),
            const SizedBox(height: 10),
            Text(
              label,
              style: const TextStyle(
                color: Colors.black87,
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold,
                fontSize: 18,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

import 'package:flutter/material.dart';
import 'package:mvtz/referral_screen.dart';
import 'package:mvtz/roadmap_screen.dart';
import 'package:mvtz/task_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'games_screen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MVTZ Mining Bot',
      theme: ThemeData(
        primaryColor: const Color(0xFF4A148C),
        brightness: Brightness.dark,
        textTheme: const TextTheme(
          titleLarge: TextStyle(
            color: Colors.white,
            fontFamily: 'Montserrat',
            fontWeight: FontWeight.bold,
          ),
          bodyMedium: TextStyle(
            color: Colors.white70,
            fontFamily: 'Montserrat',
          ),
        ),
        buttonTheme: ButtonThemeData(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          buttonColor: Colors.amber,
          splashColor: Colors.amberAccent,
        ),
        iconTheme: const IconThemeData(color: Colors.amberAccent),
      ),
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  double _points = 39.5;
  static const double dailyLimit = 1000.0;
  int _rechargesLeft = 0; // Example with no recharges left
  bool _showPlusOne = false;
  late AnimationController _animationController;
  late Animation<double> _animation;
  late Animation<double> _bounceAnimation;

  @override
  void initState() {
    super.initState();
    _loadPoints();

    _animationController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    );

    _animation = Tween<double>(begin: 0, end: -50).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeInOut,
      ),
    );

    _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.bounceOut,
      ),
    );
  }

  Future<void> _loadPoints() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _points = prefs.getDouble('points') ?? 0.0;
      _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
    });
  }

  Future<void> _savePoints() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setDouble('points', _points);
    await prefs.setInt('rechargesLeft', _rechargesLeft);
  }

  void _mineCoin() {
    if (_points >= 1000.0) {
      setState(() {
        _points -= 1000; // Decrement points by 1000
        _showPlusOne = true;
      });
      _animationController.reset();
      _animationController.forward().then((_) {
        setState(() {
          _showPlusOne = false;
        });
      });
      _savePoints(); // Save points after each decrement
    } else {
      setState(() {
        _points = 0.0; // Cap at 0 if points are below 1000
      });
      _savePoints(); // Save points even if it's capped
    }
  }

  void _rechargeEnergy() {
    if (_rechargesLeft > 0) {
      setState(() {
        _points = 0.0; // Reset points
        _rechargesLeft--; // Decrease recharge count
      });
      _savePoints();
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final double logoSize = screenWidth * 0.5;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Row(
          children: [
            ClipOval(
              child: Image.asset(
                'assets/mvtz_logo1.png',
                height: 40,
                width: 40,
                fit: BoxFit.cover,
              ),
            ),
            const SizedBox(width: 10),
            const Text(
              'MVTZ Mining Bot',
              style: TextStyle(
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold,
                fontSize: 20,
              ),
            ),
          ],
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF004D40), Color(0xFF00796B)], // Dark Green Gradient
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            GestureDetector(
              onTap: _mineCoin,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  CircleAvatar(
                    radius: logoSize / 2,
                    backgroundColor: Colors.black87, // Circle background color
                    child: ClipOval(
                      child: Image.asset(
                        'assets/mvtz_logo.png',
                        width: logoSize,
                        height: logoSize,
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                  if (_showPlusOne)
                    Positioned(
                      bottom: _animation.value + _bounceAnimation.value,
                      child: const Text(
                        '-1000',
                        style: TextStyle(
                          color: Colors.yellow,
                          fontSize: 30,
                          fontWeight: FontWeight.bold,
                          shadows: [
                            Shadow(
                              blurRadius: 10,
                              color: Colors.black,
                              offset: Offset(0, 2),
                            ),
                          ],
                        ),
                      ),
                    ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // Points Display with daily limit info and recharge option
            Container(
              padding: const EdgeInsets.all(20.0),
              decoration: BoxDecoration(
                color: Colors.black87,
                borderRadius: BorderRadius.circular(15),
                boxShadow: const [
                  BoxShadow(
                    color: Colors.black54,
                    offset: Offset(0, 4),
                    blurRadius: 5,
                  ),
                ],
              ),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        'Points: $_points / $dailyLimit', // Display current points with daily limit
                        style: const TextStyle(
                          color: Colors.yellow,
                          fontSize: 28,
                          fontFamily: 'Montserrat',
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Stack(
                    children: [
                      LinearProgressIndicator(
                        value: _points / dailyLimit,
                        minHeight: 10,
                        backgroundColor: Colors.white30,
                        color: Colors.yellow,
                      ),
                      Positioned(
                        top: 2,
                        left: 10,
                        child: Row(
                          children: [
                            Icon(Icons.battery_full, color: Colors.yellow, size: 18),
                            Text(
                              '${_points.toInt()}/$dailyLimit',
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 16,
                                fontFamily: 'Montserrat',
                              ),
                            ),
                          ],
                        ),
                      ),
                      Positioned(
                        right: 10,
                        child: GestureDetector(
                          onTap: _rechargesLeft > 0 ? _rechargeEnergy : null,
                          child: Row(
                            children: [
                              Text(
                                'Increase',
                                style: TextStyle(
                                  color: _rechargesLeft > 0 ? Colors.yellow : Colors.white54,
                                  fontSize: 16,
                                  fontFamily: 'Montserrat',
                                ),
                              ),
                              const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.yellow),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Text(
                    'Recharges Left: $_rechargesLeft', // Display remaining recharges
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 20,
                      fontFamily: 'Montserrat',
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // Options Display with light yellow gradient
            Expanded(
              child: GridView.count(
                crossAxisCount: 2,
                crossAxisSpacing: 20,
                mainAxisSpacing: 20,
                children: [
                  _buildOption(
                    context,
                    'Tasks',
                    'Complete tasks to earn points',
                    'assets/icons/task.png', // Replace with your icon path
                    Colors.orangeAccent,
                        () => Navigator.push(context, MaterialPageRoute(builder: (context) => TaskScreen())),
                  ),
                  _buildOption(
                    context,
                    'Games',
                    'Play games and win rewards',
                    'assets/icons/mining.png', // Replace with your icon path
                    Colors.lightGreen,
                        () => Navigator.push(context, MaterialPageRoute(builder: (context) => GamesScreen())),
                  ),
                  _buildOption(
                    context,
                    'Roadmap',
                    'View progress and milestones',
                    'assets/icons/roadmap.png', // Replace with your icon path
                    Colors.lightBlueAccent,
                        () => Navigator.push(context, MaterialPageRoute(builder: (context) => RoadmapScreen())),
                  ),
                  _buildOption(
                    context,
                    'Referral',
                    'Invite friends and earn bonuses',
                    'assets/icons/referral.png', // Replace with your icon path
                    Colors.deepPurpleAccent,
                        () => Navigator.push(context, MaterialPageRoute(builder: (context) => ReferralScreen())),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOption(BuildContext context, String title, String description, String imagePath, Color color, VoidCallback onTap) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [color.withOpacity(0.6), color],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(20),
          boxShadow: const [
            BoxShadow(
              color: Colors.black38,
              offset: Offset(0, 4),
              blurRadius: 5,
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(
              imagePath,
              height: 60,
              fit: BoxFit.cover,
            ),
            const SizedBox(height: 10),
            Text(
              title,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 18,
                fontWeight: FontWeight.bold,
                fontFamily: 'Montserrat',
              ),
            ),
            const SizedBox(height: 5),
            Text(
              description,
              textAlign: TextAlign.center,
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 14,
                fontFamily: 'Montserrat',
              ),
            ),
          ],
        ),
      ),
    );
  }
}


// import 'package:flutter/material.dart';
// import 'package:mvtz/referral_screen.dart';
// import 'package:mvtz/roadmap_screen.dart';
// import 'package:mvtz/task_screen.dart';
// import 'package:shared_preferences/shared_preferences.dart';
// import 'games_screen.dart';
//
// void main() {
//   runApp(const MyApp());
// }
//
// class MyApp extends StatelessWidget {
//   const MyApp({super.key});
//
//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       title: 'MVTZ Mining Bot',
//       theme: ThemeData(
//         primaryColor: const Color(0xFF4A148C),
//         brightness: Brightness.dark,
//         textTheme: const TextTheme(
//           titleLarge: TextStyle(
//             color: Colors.white,
//             fontFamily: 'Montserrat',
//             fontWeight: FontWeight.bold,
//           ),
//           bodyMedium: TextStyle(
//             color: Colors.white70,
//             fontFamily: 'Montserrat',
//           ),
//         ),
//         buttonTheme: ButtonThemeData(
//           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
//           buttonColor: Colors.amber,
//           splashColor: Colors.amberAccent,
//         ),
//         iconTheme: const IconThemeData(color: Colors.amberAccent),
//       ),
//       home: const HomeScreen(),
//     );
//   }
// }
//
// class HomeScreen extends StatefulWidget {
//   const HomeScreen({super.key});
//
//   @override
//   _HomeScreenState createState() => _HomeScreenState();
// }
//
// class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
//   double _points = 39.5;
//   static const double dailyLimit = 1000.0;
//   int _rechargesLeft = 0; // Example with no recharges left
//   bool _showPlusOne = false;
//   late AnimationController _animationController;
//   late Animation<double> _animation;
//   late Animation<double> _bounceAnimation;
//
//   @override
//   void initState() {
//     super.initState();
//     _loadPoints();
//
//     _animationController = AnimationController(
//       duration: const Duration(seconds: 1),
//       vsync: this,
//     );
//
//     _animation = Tween<double>(begin: 0, end: -50).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.easeInOut,
//       ),
//     );
//
//     _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.bounceOut,
//       ),
//     );
//   }
//
//   Future<void> _loadPoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     setState(() {
//       _points = prefs.getDouble('points') ?? 0.0;
//       _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
//     });
//   }
//
//   Future<void> _savePoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     await prefs.setDouble('points', _points);
//     await prefs.setInt('rechargesLeft', _rechargesLeft);
//   }
//
//   void _mineCoin() {
//     if (_points >= 1000.0) {
//       setState(() {
//         _points -= 1000; // Decrement points by 1000
//         _showPlusOne = true;
//       });
//       _animationController.reset();
//       _animationController.forward().then((_) {
//         setState(() {
//           _showPlusOne = false;
//         });
//       });
//       _savePoints(); // Save points after each decrement
//     } else {
//       setState(() {
//         _points = 0.0; // Cap at 0 if points are below 1000
//       });
//       _savePoints(); // Save points even if it's capped
//     }
//   }
//
//   void _rechargeEnergy() {
//     if (_rechargesLeft > 0) {
//       setState(() {
//         _points = 0.0; // Reset points
//         _rechargesLeft--; // Decrease recharge count
//       });
//       _savePoints();
//     }
//   }
//
//   @override
//   void dispose() {
//     _animationController.dispose();
//     super.dispose();
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final double screenWidth = MediaQuery.of(context).size.width;
//     final double logoSize = screenWidth * 0.5;
//
//     return Scaffold(
//       appBar: AppBar(
//         backgroundColor: Colors.transparent,
//         elevation: 0,
//         title: Row(
//           children: [
//             ClipOval(
//               child: Image.asset(
//                 'assets/mvtz_logo1.png',
//                 height: 40,
//                 width: 40,
//                 fit: BoxFit.cover,
//               ),
//             ),
//             const SizedBox(width: 10),
//             const Text(
//               'MVTZ Mining Bot',
//               style: TextStyle(
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//                 fontSize: 20,
//               ),
//             ),
//           ],
//         ),
//       ),
//       body: Container(
//         decoration: const BoxDecoration(
//           gradient: LinearGradient(
//             colors: [Color(0xFF004D40), Color(0xFF00796B)], // Dark Green Gradient
//             begin: Alignment.topLeft,
//             end: Alignment.bottomRight,
//           ),
//         ),
//         padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.center,
//           children: [
//             GestureDetector(
//               onTap: _mineCoin,
//               child: Stack(
//                 alignment: Alignment.center,
//                 children: [
//                   CircleAvatar(
//                     radius: logoSize / 2,
//                     backgroundColor: Colors.black87, // Circle background color
//                     child: ClipOval(
//                       child: Image.asset(
//                         'assets/mvtz_logo.png',
//                         width: logoSize,
//                         height: logoSize,
//                         fit: BoxFit.contain,
//                       ),
//                     ),
//                   ),
//                   if (_showPlusOne)
//                     Positioned(
//                       bottom: _animation.value + _bounceAnimation.value,
//                       child: const Text(
//                         '-1000',
//                         style: TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 30,
//                           fontWeight: FontWeight.bold,
//                           shadows: [
//                             Shadow(
//                               blurRadius: 10,
//                               color: Colors.black,
//                               offset: Offset(0, 2),
//                             ),
//                           ],
//                         ),
//                       ),
//                     ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Points Display with daily limit info and recharge option
//             Container(
//               padding: const EdgeInsets.all(20.0),
//               decoration: BoxDecoration(
//                 color: Colors.black87,
//                 borderRadius: BorderRadius.circular(15),
//                 boxShadow: const [
//                   BoxShadow(
//                     color: Colors.black54,
//                     offset: Offset(0, 4),
//                     blurRadius: 5,
//                   ),
//                 ],
//               ),
//               child: Column(
//                 children: [
//                   Row(
//                     mainAxisAlignment: MainAxisAlignment.center,
//                     children: [
//                       Text(
//                         'Points: $_points / $dailyLimit', // Display current points with daily limit
//                         style: const TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 28,
//                           fontFamily: 'Montserrat',
//                           fontWeight: FontWeight.bold,
//                         ),
//                       ),
//                     ],
//                   ),
//                   const SizedBox(height: 10),
//                   Stack(
//                     children: [
//                       LinearProgressIndicator(
//                         value: _points / dailyLimit,
//                         minHeight: 10,
//                         backgroundColor: Colors.white30,
//                         color: Colors.yellow,
//                       ),
//                       Positioned(
//                         top: 2,
//                         left: 10,
//                         child: Row(
//                           children: [
//                             Icon(Icons.battery_full, color: Colors.yellow, size: 18),
//                             Text(
//                               '${_points.toInt()}/$dailyLimit',
//                               style: const TextStyle(
//                                 color: Colors.white,
//                                 fontSize: 16,
//                                 fontFamily: 'Montserrat',
//                               ),
//                             ),
//                           ],
//                         ),
//                       ),
//                       Positioned(
//                         right: 10,
//                         child: GestureDetector(
//                           onTap: _rechargesLeft > 0 ? _rechargeEnergy : null,
//                           child: Row(
//                             children: [
//                               Text(
//                                 'Increase',
//                                 style: TextStyle(
//                                   color: _rechargesLeft > 0 ? Colors.yellow : Colors.white54,
//                                   fontSize: 16,
//                                   fontFamily: 'Montserrat',
//                                 ),
//                               ),
//                               const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.yellow),
//                             ],
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                   const SizedBox(height: 10),
//                   Text(
//                     'Recharges Left: $_rechargesLeft', // Display remaining recharges
//                     style: const TextStyle(
//                       color: Colors.white,
//                       fontSize: 20,
//                       fontFamily: 'Montserrat',
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Options Display with light yellow gradient
//             Expanded(
//               child: GridView.count(
//                 crossAxisCount: 2,
//                 crossAxisSpacing: 20,
//                 mainAxisSpacing: 20,
//                 children: [
//                   _buildOption(
//                     context,
//                     'Tasks',
//                     'Complete tasks to earn points',
//                     'assets/icons/task.png', // Replace with your icon path
//                     Colors.orangeAccent,
//                         () => Navigator.push(context, MaterialPageRoute(builder: (context) => TaskScreen())),
//                   ),
//                   _buildOption(
//                     context,
//                     'Games',
//                     'Play games to earn points',
//                     'assets/icons/mining.png', // Replace with your icon path
//                     Colors.pinkAccent,
//                         () => Navigator.push(context, MaterialPageRoute(builder: (context) => GamesScreen())),
//                   ),
//                   _buildOption(
//                     context,
//                     'Roadmap',
//                     'Check the roadmap progress',
//                     'assets/icons/roadmap.png', // Replace with your icon path
//                     Colors.blueAccent,
//                         () => Navigator.push(context, MaterialPageRoute(builder: (context) => RoadmapScreen())),
//                   ),
//                   _buildOption(
//                     context,
//                     'Referral',
//                     'Invite friends and earn',
//                     'assets/icons/referral.png', // Replace with your icon path
//                     Colors.purpleAccent,
//                         () => Navigator.push(context, MaterialPageRoute(builder: (context) => ReferralScreen())),
//                   ),
//                 ],
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
//
//   Widget _buildOption(BuildContext context, String title, String subtitle, String imagePath, Color color, VoidCallback onTap) {
//     return GestureDetector(
//       onTap: onTap,
//       child: Container(
//         decoration: BoxDecoration(
//           color: color,
//           borderRadius: BorderRadius.circular(15),
//           boxShadow: const [
//             BoxShadow(
//               color: Colors.black45,
//               offset: Offset(0, 4),
//               blurRadius: 5,
//             ),
//           ],
//         ),
//         padding: const EdgeInsets.all(16.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.start,
//           children: [
//             Expanded(
//               child: Center(
//                 child: Image.asset(
//                   imagePath,
//                   fit: BoxFit.contain,
//                   color: Colors.white, // Ensures the image maintains consistent color if needed
//                 ),
//               ),
//             ),
//             const SizedBox(height: 10),
//             Text(
//               title,
//               style: const TextStyle(
//                 color: Colors.white,
//                 fontSize: 22,
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//               ),
//             ),
//             const SizedBox(height: 5),
//             Text(
//               subtitle,
//               style: const TextStyle(
//                 color: Colors.white70,
//                 fontSize: 16,
//                 fontFamily: 'Montserrat',
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }



// import 'package:flutter/material.dart';
// import 'package:mvtz/referral_screen.dart';
// import 'package:mvtz/roadmap_screen.dart';
// import 'package:mvtz/task_screen.dart';
// import 'package:shared_preferences/shared_preferences.dart';
// import 'games_screen.dart';
//
// void main() {
//   runApp(const MyApp());
// }
//
// class MyApp extends StatelessWidget {
//   const MyApp({super.key});
//
//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       title: 'MVTZ Mining Bot',
//       theme: ThemeData(
//         primaryColor: const Color(0xFF4A148C),
//         brightness: Brightness.dark,
//         textTheme: const TextTheme(
//           titleLarge: TextStyle(
//             color: Colors.white,
//             fontFamily: 'Montserrat',
//             fontWeight: FontWeight.bold,
//           ),
//           bodyMedium: TextStyle(
//             color: Colors.white70,
//             fontFamily: 'Montserrat',
//           ),
//         ),
//         buttonTheme: ButtonThemeData(
//           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
//           buttonColor: Colors.amber,
//           splashColor: Colors.amberAccent,
//         ),
//         iconTheme: const IconThemeData(color: Colors.amberAccent),
//       ),
//       home: const HomeScreen(),
//     );
//   }
// }
//
// class HomeScreen extends StatefulWidget {
//   const HomeScreen({super.key});
//
//   @override
//   _HomeScreenState createState() => _HomeScreenState();
// }
//
// class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
//   double _points = 39.5;
//   static const double dailyLimit = 1000.0;
//   int _rechargesLeft = 0; // Example with no recharges left
//   bool _showPlusOne = false;
//   late AnimationController _animationController;
//   late Animation<double> _animation;
//   late Animation<double> _bounceAnimation;
//
//   @override
//   void initState() {
//     super.initState();
//     _loadPoints();
//
//     _animationController = AnimationController(
//       duration: const Duration(seconds: 1),
//       vsync: this,
//     );
//
//     _animation = Tween<double>(begin: 0, end: -50).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.easeInOut,
//       ),
//     );
//
//     _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.bounceOut,
//       ),
//     );
//   }
//
//   Future<void> _loadPoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     setState(() {
//       _points = prefs.getDouble('points') ?? 0.0;
//       _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
//     });
//   }
//
//   Future<void> _savePoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     await prefs.setDouble('points', _points);
//     await prefs.setInt('rechargesLeft', _rechargesLeft);
//   }
//
//   void _mineCoin() {
//     if (_points + 0.5 <= dailyLimit) {
//       setState(() {
//         _points += 0.5; // Increment points by 0.5 for mining action
//         _showPlusOne = true;
//       });
//       _animationController.reset();
//       _animationController.forward().then((_) {
//         setState(() {
//           _showPlusOne = false;
//         });
//       });
//       _savePoints(); // Save points after each increment
//     } else {
//       setState(() {
//         _points = dailyLimit; // Cap at the daily limit
//       });
//       _savePoints(); // Save points even if it's capped
//     }
//   }
//
//   void _rechargeEnergy() {
//     if (_rechargesLeft > 0) {
//       setState(() {
//         _points = 0.0; // Reset points
//         _rechargesLeft--; // Decrease recharge count
//       });
//       _savePoints();
//     }
//   }
//
//   @override
//   void dispose() {
//     _animationController.dispose();
//     super.dispose();
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final double screenWidth = MediaQuery.of(context).size.width;
//     final double logoSize = screenWidth * 0.5;
//
//     return Scaffold(
//       appBar: AppBar(
//         backgroundColor: Colors.transparent,
//         elevation: 0,
//         title: Row(
//           children: [
//             ClipOval(
//               child: Image.asset(
//                 'assets/mvtz_logo1.png',
//                 height: 40,
//                 width: 40,
//                 fit: BoxFit.cover,
//               ),
//             ),
//             const SizedBox(width: 10),
//             const Text(
//               'MVTZ Mining Bot',
//               style: TextStyle(
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//                 fontSize: 20,
//               ),
//             ),
//           ],
//         ),
//       ),
//       body: Container(
//         decoration: const BoxDecoration(
//           gradient: LinearGradient(
//             colors: [Color(0xFF004D40), Color(0xFF00796B)], // Dark Green Gradient
//             begin: Alignment.topLeft,
//             end: Alignment.bottomRight,
//           ),
//         ),
//         padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.center,
//           children: [
//             GestureDetector(
//               onTap: _mineCoin,
//               child: Stack(
//                 alignment: Alignment.center,
//                 children: [
//                   CircleAvatar(
//                     radius: logoSize / 2,
//                     backgroundColor: Colors.black87, // Circle background color
//                     child: ClipOval(
//                       child: Image.asset(
//                         'assets/mvtz_logo.png',
//                         width: logoSize,
//                         height: logoSize,
//                         fit: BoxFit.contain,
//                       ),
//                     ),
//                   ),
//                   if (_showPlusOne)
//                     Positioned(
//                       bottom: _animation.value + _bounceAnimation.value,
//                       child: const Text(
//                         '+0.5',
//                         style: TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 30,
//                           fontWeight: FontWeight.bold,
//                           shadows: [
//                             Shadow(
//                               blurRadius: 10,
//                               color: Colors.black,
//                               offset: Offset(0, 2),
//                             ),
//                           ],
//                         ),
//                       ),
//                     ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Points Display with daily limit info and recharge option
//             Container(
//               padding: const EdgeInsets.all(20.0),
//               decoration: BoxDecoration(
//                 color: Colors.black87,
//                 borderRadius: BorderRadius.circular(15),
//                 boxShadow: const [
//                   BoxShadow(
//                     color: Colors.black54,
//                     offset: Offset(0, 4),
//                     blurRadius: 5,
//                   ),
//                 ],
//               ),
//               child: Column(
//                 children: [
//                   Row(
//                     mainAxisAlignment: MainAxisAlignment.center,
//                     children: [
//                       Text(
//                         'Points: $_points / $dailyLimit', // Display current points with daily limit
//                         style: const TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 28,
//                           fontFamily: 'Montserrat',
//                           fontWeight: FontWeight.bold,
//                         ),
//                       ),
//                     ],
//                   ),
//                   const SizedBox(height: 10),
//                   Stack(
//                     children: [
//                       LinearProgressIndicator(
//                         value: _points / dailyLimit,
//                         minHeight: 10,
//                         backgroundColor: Colors.white30,
//                         color: Colors.yellow,
//                       ),
//                       Positioned(
//                         top: 2,
//                         left: 10,
//                         child: Row(
//                           children: [
//                             Icon(Icons.bolt, color: Colors.yellow, size: 18),
//                             Text(
//                               '${_points.toInt()}/$dailyLimit',
//                               style: const TextStyle(
//                                 color: Colors.white,
//                                 fontSize: 16,
//                                 fontFamily: 'Montserrat',
//                               ),
//                             ),
//                           ],
//                         ),
//                       ),
//                       Positioned(
//                         right: 10,
//                         child: GestureDetector(
//                           onTap: _rechargesLeft > 0 ? _rechargeEnergy : null,
//                           child: Row(
//                             children: [
//                               Text(
//                                 'Increase',
//                                 style: TextStyle(
//                                   color: _rechargesLeft > 0 ? Colors.yellow : Colors.white54,
//                                   fontSize: 16,
//                                   fontFamily: 'Montserrat',
//                                 ),
//                               ),
//                               const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.yellow),
//                             ],
//                           ),
//                         ),
//                       ),
//                     ],
//                   ),
//                   const SizedBox(height: 10),
//                   Text(
//                     'Recharges Left: $_rechargesLeft', // Display remaining recharges
//                     style: const TextStyle(
//                       color: Colors.white,
//                       fontSize: 20,
//                       fontFamily: 'Montserrat',
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Options Display with light yellow gradient
//             Expanded(
//               child: GridView.count(
//                 crossAxisCount: 2,
//                 crossAxisSpacing: 20,
//                 mainAxisSpacing: 20,
//                 childAspectRatio: 1.2,
//                 padding: const EdgeInsets.all(10.0),
//                 children: [
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/task.png',
//                     label: 'Task',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const TaskScreen()),
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/games.png',
//                     label: 'Games',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const GamesScreen()),
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/roadmap.png',
//                     label: 'Roadmap',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const RoadmapScreen()),
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/wallet.png',
//                     label: 'Wallet',
//                     onPressed: () {
//                       // Placeholder for Wallet screen
//                     },
//                   ),
//                 ],
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
//
//   Widget _buildOption(BuildContext context,
//       {required String imagePath, required String label, required VoidCallback onPressed}) {
//     return GestureDetector(
//       onTap: onPressed,
//       child: Container(
//         decoration: BoxDecoration(
//           gradient: const LinearGradient(
//             colors: [Colors.yellowAccent, Colors.orangeAccent],
//             begin: Alignment.topLeft,
//             end: Alignment.bottomRight,
//           ),
//           borderRadius: BorderRadius.circular(15),
//           boxShadow: const [
//             BoxShadow(
//               color: Colors.black26,
//               offset: Offset(0, 4),
//               blurRadius: 5,
//             ),
//           ],
//         ),
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           children: [
//             Image.asset(imagePath, height: 50, color: Colors.black87),
//             const SizedBox(height: 10),
//             Text(
//               label,
//               style: const TextStyle(
//                 color: Colors.black87,
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//                 fontSize: 18,
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }



// import 'package:flutter/material.dart';
// import 'package:mvtz/referral_screen.dart';
// import 'package:mvtz/roadmap_screen.dart';
// import 'package:mvtz/task_screen.dart';
// import 'package:shared_preferences/shared_preferences.dart';
// import 'games_screen.dart';
//
// void main() {
//   runApp(const MyApp());
// }
//
// class MyApp extends StatelessWidget {
//   const MyApp({super.key});
//
//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       title: 'MVTZ Mining Bot',
//       theme: ThemeData(
//         primaryColor: const Color(0xFF4A148C),
//         brightness: Brightness.dark,
//         textTheme: const TextTheme(
//           titleLarge: TextStyle(
//             color: Colors.white,
//             fontFamily: 'Montserrat',
//             fontWeight: FontWeight.bold,
//           ),
//           bodyMedium: TextStyle(
//             color: Colors.white70,
//             fontFamily: 'Montserrat',
//           ),
//         ),
//         buttonTheme: ButtonThemeData(
//           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
//           buttonColor: Colors.amber,
//           splashColor: Colors.amberAccent,
//         ),
//         iconTheme: const IconThemeData(color: Colors.amberAccent),
//       ),
//       home: const HomeScreen(),
//     );
//   }
// }
//
// class HomeScreen extends StatefulWidget {
//   const HomeScreen({super.key});
//
//   @override
//   _HomeScreenState createState() => _HomeScreenState();
// }
//
// class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
//   double _points = 0.0;
//   static const double dailyLimit = 1000.0;
//   int _rechargesLeft = 3; // Allow two recharges per day
//   bool _showPlusOne = false;
//   late AnimationController _animationController;
//   late Animation<double> _animation;
//   late Animation<double> _bounceAnimation;
//
//   @override
//   void initState() {
//     super.initState();
//     _loadPoints();
//
//     _animationController = AnimationController(
//       duration: const Duration(seconds: 1),
//       vsync: this,
//     );
//
//     _animation = Tween<double>(begin: 0, end: -50).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.easeInOut,
//       ),
//     );
//
//     _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.bounceOut,
//       ),
//     );
//   }
//
//   Future<void> _loadPoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     setState(() {
//       _points = prefs.getDouble('points') ?? 0.0;
//       _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
//     });
//   }
//
//   Future<void> _savePoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     await prefs.setDouble('points', _points);
//     await prefs.setInt('rechargesLeft', _rechargesLeft);
//   }
//
//   void _mineCoin() {
//     if (_points + 0.5 <= dailyLimit) {
//       setState(() {
//         _points += 0.5; // Increment points by 0.5 for mining action
//         _showPlusOne = true;
//       });
//       _animationController.reset();
//       _animationController.forward().then((_) {
//         setState(() {
//           _showPlusOne = false;
//         });
//       });
//       _savePoints(); // Save points after each increment
//     } else {
//       setState(() {
//         _points = dailyLimit; // Cap at the daily limit
//       });
//       _savePoints(); // Save points even if it's capped
//     }
//   }
//
//   void _rechargeEnergy() {
//     if (_rechargesLeft > 0) {
//       setState(() {
//         _points = 0.0; // Reset points
//         _rechargesLeft--; // Decrease recharge count
//       });
//       _savePoints();
//     }
//   }
//
//   @override
//   void dispose() {
//     _animationController.dispose();
//     super.dispose();
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final double screenWidth = MediaQuery.of(context).size.width;
//     final double logoSize = screenWidth * 0.5;
//
//     return Scaffold(
//       appBar: AppBar(
//         backgroundColor: Colors.transparent,
//         elevation: 0,
//         title: Row(
//           children: [
//             ClipOval(
//               child: Image.asset(
//                 'assets/mvtz_logo1.png',
//                 height: 40,
//                 width: 40,
//                 fit: BoxFit.cover,
//               ),
//             ),
//             const SizedBox(width: 10),
//             const Text(
//               'MVTZ Mining Bot',
//               style: TextStyle(
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//                 fontSize: 20,
//               ),
//             ),
//           ],
//         ),
//       ),
//       body: Container(
//         decoration: const BoxDecoration(
//           gradient: LinearGradient(
//             colors: [Color(0xFF004D40), Color(0xFF00796B)], // Dark Green Gradient
//             begin: Alignment.topLeft,
//             end: Alignment.bottomRight,
//           ),
//         ),
//         padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.center,
//           children: [
//             GestureDetector(
//               onTap: _mineCoin,
//               child: Stack(
//                 alignment: Alignment.center,
//                 children: [
//                   CircleAvatar(
//                     radius: logoSize / 2,
//                     backgroundColor: Colors.black87, // Circle background color
//                     child: ClipOval(
//                       child: Image.asset(
//                         'assets/mvtz_logo.png',
//                         width: logoSize,
//                         height: logoSize,
//                         fit: BoxFit.contain,
//                       ),
//                     ),
//                   ),
//                   if (_showPlusOne)
//                     Positioned(
//                       bottom: _animation.value + _bounceAnimation.value,
//                       child: const Text(
//                         '+0.5',
//                         style: TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 30,
//                           fontWeight: FontWeight.bold,
//                           shadows: [
//                             Shadow(
//                               blurRadius: 10,
//                               color: Colors.black,
//                               offset: Offset(0, 2),
//                             ),
//                           ],
//                         ),
//                       ),
//                     ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Points Display with daily limit info
//             Container(
//               padding: const EdgeInsets.all(20.0),
//               decoration: BoxDecoration(
//                 color: Colors.black87,
//                 borderRadius: BorderRadius.circular(15),
//                 boxShadow: const [
//                   BoxShadow(
//                     color: Colors.black54,
//                     offset: Offset(0, 4),
//                     blurRadius: 5,
//                   ),
//                 ],
//               ),
//               child: Column(
//                 children: [
//                   Row(
//                     mainAxisAlignment: MainAxisAlignment.center,
//                     children: [
//                       Text(
//                         'Points: $_points / $dailyLimit', // Display current points with daily limit
//                         style: const TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 28,
//                           fontFamily: 'Montserrat',
//                           fontWeight: FontWeight.bold,
//                         ),
//                       ),
//                     ],
//                   ),
//                   const SizedBox(height: 10),
//                   Text(
//                     'Recharges Left: $_rechargesLeft', // Display remaining recharges
//                     style: const TextStyle(
//                       color: Colors.white,
//                       fontSize: 20,
//                       fontFamily: 'Montserrat',
//                     ),
//                   ),
//                   const SizedBox(height: 10),
//                   ElevatedButton.icon(
//                     onPressed: _rechargesLeft > 0 ? _rechargeEnergy : null,
//                     icon: const Icon(Icons.bolt, color: Colors.amber),
//                     label: const Text('Recharge Energy'),
//                     style: ElevatedButton.styleFrom(
//                       backgroundColor: Colors.amber, // Button background color
//                       foregroundColor: Colors.black, // Button text color
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Options Display
//             Expanded(
//               child: GridView.count(
//                 crossAxisCount: 2,
//                 crossAxisSpacing: 20,
//                 mainAxisSpacing: 20,
//                 childAspectRatio: 1.2,
//                 padding: const EdgeInsets.all(10.0),
//                 children: [
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/task.png',
//                     label: 'Task',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const TaskScreen()),
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/mining.png', // Updated icon for Games
//                     label: 'Games', // Updated label for Games
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const GamesScreen()), // Updated route for Games screen
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/roadmap.png',
//                     label: 'Roadmap',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const RoadmapScreen()), // Navigate to RoadmapScreen
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/referral.png',
//                     label: 'Referral',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const ReferralScreen()), // Navigate to ReferralScreen
//                       );
//                     },
//                   ),
//                 ],
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
//   Widget _buildOption(BuildContext context,
//       {required String imagePath, required String label, required VoidCallback onPressed}) {
//     return GestureDetector(
//       onTap: onPressed,
//       child: Container(
//         decoration: BoxDecoration(
//           color: Colors.black87, // Box color remains unchanged
//           borderRadius: BorderRadius.circular(15),
//           boxShadow: const [
//             BoxShadow(
//               color: Colors.black54,
//               offset: Offset(0, 4),
//               blurRadius: 5,
//             ),
//           ],
//         ),
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           children: [
//             Image.asset(
//               imagePath,
//               height: 50,
//               // Removed color property to retain original icon color
//             ),
//             const SizedBox(height: 10),
//             Text(
//               label,
//               style: const TextStyle(
//                 color: Colors.white,
//                 fontSize: 20,
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }



// import 'package:flutter/material.dart';
// import 'package:mvtz/referral_screen.dart';
// import 'package:mvtz/roadmap_screen.dart';
// import 'package:mvtz/task_screen.dart';
// import 'package:shared_preferences/shared_preferences.dart';
// import 'games_screen.dart';
//
// void main() {
//   runApp(const MyApp());
// }
//
// class MyApp extends StatelessWidget {
//   const MyApp({super.key});
//
//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       title: 'MVTZ Mining Bot',
//       theme: ThemeData(
//         primaryColor: const Color(0xFF4A148C),
//         brightness: Brightness.dark,
//         textTheme: const TextTheme(
//           titleLarge: TextStyle(
//             color: Colors.white,
//             fontFamily: 'Montserrat',
//             fontWeight: FontWeight.bold,
//           ),
//           bodyMedium: TextStyle(
//             color: Colors.white70,
//             fontFamily: 'Montserrat',
//           ),
//         ),
//         buttonTheme: ButtonThemeData(
//           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
//           buttonColor: Colors.amber,
//           splashColor: Colors.amberAccent,
//         ),
//         iconTheme: const IconThemeData(color: Colors.amberAccent),
//       ),
//       home: const HomeScreen(),
//     );
//   }
// }
//
// class HomeScreen extends StatefulWidget {
//   const HomeScreen({super.key});
//
//   @override
//   _HomeScreenState createState() => _HomeScreenState();
// }
//
// class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
//   double _points = 0.0;
//   static const double dailyLimit = 50.0;
//   int _rechargesLeft = 2; // Allow two recharges per day
//   bool _showPlusOne = false;
//   late AnimationController _animationController;
//   late Animation<double> _animation;
//   late Animation<double> _bounceAnimation;
//
//   @override
//   void initState() {
//     super.initState();
//     _loadPoints();
//
//     _animationController = AnimationController(
//       duration: const Duration(seconds: 1),
//       vsync: this,
//     );
//
//     _animation = Tween<double>(begin: 0, end: -50).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.easeInOut,
//       ),
//     );
//
//     _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.bounceOut,
//       ),
//     );
//   }
//
//   Future<void> _loadPoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     setState(() {
//       _points = prefs.getDouble('points') ?? 0.0;
//       _rechargesLeft = prefs.getInt('rechargesLeft') ?? 2;
//     });
//   }
//
//   Future<void> _savePoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     await prefs.setDouble('points', _points);
//     await prefs.setInt('rechargesLeft', _rechargesLeft);
//   }
//
//   void _mineCoin() {
//     if (_points + 0.5 <= dailyLimit) {
//       setState(() {
//         _points += 0.5; // Increment points by 0.5 for mining action
//         _showPlusOne = true;
//       });
//       _animationController.reset();
//       _animationController.forward().then((_) {
//         setState(() {
//           _showPlusOne = false;
//         });
//       });
//       _savePoints(); // Save points after each increment
//     } else {
//       setState(() {
//         _points = dailyLimit; // Cap at the daily limit
//       });
//       _savePoints(); // Save points even if it's capped
//     }
//   }
//
//   void _rechargeEnergy() {
//     if (_rechargesLeft > 0) {
//       setState(() {
//         _points = 0.0; // Reset points
//         _rechargesLeft--; // Decrease recharge count
//       });
//       _savePoints();
//     }
//   }
//
//   @override
//   void dispose() {
//     _animationController.dispose();
//     super.dispose();
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final double screenWidth = MediaQuery.of(context).size.width;
//     final double logoSize = screenWidth * 0.5;
//
//     return Scaffold(
//       appBar: AppBar(
//         backgroundColor: Colors.transparent,
//         elevation: 0,
//         title: Row(
//           children: [
//             ClipOval(
//               child: Image.asset(
//                 'assets/mvtz_logo1.png',
//                 height: 40,
//                 width: 40,
//                 fit: BoxFit.cover,
//               ),
//             ),
//             const SizedBox(width: 10),
//             const Text(
//               'MVTZ Mining Bot',
//               style: TextStyle(
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//                 fontSize: 20,
//               ),
//             ),
//           ],
//         ),
//       ),
//       body: Container(
//         decoration: const BoxDecoration(
//           gradient: LinearGradient(
//             colors: [Color(0xFF004D40), Color(0xFF00796B)], // Dark Green Gradient
//             begin: Alignment.topLeft,
//             end: Alignment.bottomRight,
//           ),
//         ),
//         padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.center,
//           children: [
//             GestureDetector(
//               onTap: _mineCoin,
//               child: Stack(
//                 alignment: Alignment.center,
//                 children: [
//                   CircleAvatar(
//                     radius: logoSize / 2,
//                     backgroundColor: Colors.black87, // Circle background color
//                     child: ClipOval(
//                       child: Image.asset(
//                         'assets/mvtz_logo.png',
//                         width: logoSize,
//                         height: logoSize,
//                         fit: BoxFit.contain,
//                       ),
//                     ),
//                   ),
//                   if (_showPlusOne)
//                     Positioned(
//                       bottom: _animation.value + _bounceAnimation.value,
//                       child: const Text(
//                         '+0.5',
//                         style: TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 30,
//                           fontWeight: FontWeight.bold,
//                           shadows: [
//                             Shadow(
//                               blurRadius: 10,
//                               color: Colors.black,
//                               offset: Offset(0, 2),
//                             ),
//                           ],
//                         ),
//                       ),
//                     ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Points Display with daily limit info
//             Container(
//               padding: const EdgeInsets.all(20.0),
//               decoration: BoxDecoration(
//                 color: Colors.black87,
//                 borderRadius: BorderRadius.circular(15),
//                 boxShadow: const [
//                   BoxShadow(
//                     color: Colors.black54,
//                     offset: Offset(0, 4),
//                     blurRadius: 5,
//                   ),
//                 ],
//               ),
//               child: Column(
//                 children: [
//                   Row(
//                     mainAxisAlignment: MainAxisAlignment.center,
//                     children: [
//                       Text(
//                         'Points: $_points / $dailyLimit', // Display current points with daily limit
//                         style: const TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 28,
//                           fontFamily: 'Montserrat',
//                           fontWeight: FontWeight.bold,
//                         ),
//                       ),
//                     ],
//                   ),
//                   const SizedBox(height: 10),
//                   Text(
//                     'Recharges Left: $_rechargesLeft', // Display remaining recharges
//                     style: const TextStyle(
//                       color: Colors.white,
//                       fontSize: 20,
//                       fontFamily: 'Montserrat',
//                     ),
//                   ),
//                   const SizedBox(height: 10),
//                   ElevatedButton.icon(
//                     onPressed: _rechargesLeft > 0 ? _rechargeEnergy : null,
//                     icon: const Icon(Icons.bolt, color: Colors.amber),
//                     label: const Text('Recharge Energy'),
//                     style: ElevatedButton.styleFrom(
//                       foregroundColor: Colors.black, backgroundColor: Colors.amber, // Button text color
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Options Display
//             Expanded(
//               child: GridView.count(
//                 crossAxisCount: 2,
//                 crossAxisSpacing: 20,
//                 mainAxisSpacing: 20,
//                 childAspectRatio: 1.2,
//                 padding: const EdgeInsets.all(10.0),
//                 children: [
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/task.png',
//                     label: 'Task',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const TaskScreen()),
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/mining.png', // Updated icon for Games
//                     label: 'Games', // Updated label for Games
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const GamesScreen()), // Updated route for Games screen
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/roadmap.png',
//                     label: 'Roadmap',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const RoadmapScreen()), // Navigate to RoadmapScreen
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/referral.png',
//                     label: 'Referral',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const ReferralScreen()),
//                       );
//                     },
//                   ),
//                 ],
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
//
//   Widget _buildOption(BuildContext context,
//       {required String imagePath, required String label, required VoidCallback onPressed}) {
//     return GestureDetector(
//       onTap: onPressed,
//       child: Container(
//         decoration: BoxDecoration(
//           color: Colors.black87,
//           borderRadius: BorderRadius.circular(15),
//           boxShadow: const [
//             BoxShadow(
//               color: Colors.black54,
//               offset: Offset(0, 4),
//               blurRadius: 5,
//             ),
//           ],
//         ),
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           children: [
//             Image.asset(
//               imagePath,
//               height: 50,
//               color: Colors.amberAccent,
//             ),
//             const SizedBox(height: 10),
//             Text(
//               label,
//               style: const TextStyle(
//                 color: Colors.white,
//                 fontSize: 20,
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }


// import 'package:flutter/material.dart';
// import 'package:mvtz/referral_screen.dart';
// import 'package:mvtz/roadmap_screen.dart';
// import 'package:mvtz/task_screen.dart';
// import 'package:shared_preferences/shared_preferences.dart';
// import 'games_screen.dart';
//
// void main() {
//   runApp(const MyApp());
// }
//
// class MyApp extends StatelessWidget {
//   const MyApp({super.key});
//
//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       title: 'MVTZ Mining Bot',
//       theme: ThemeData(
//         primaryColor: const Color(0xFF4A148C),
//         brightness: Brightness.dark,
//         textTheme: const TextTheme(
//           titleLarge: TextStyle(
//             color: Colors.white,
//             fontFamily: 'Montserrat',
//             fontWeight: FontWeight.bold,
//           ),
//           bodyMedium: TextStyle(
//             color: Colors.white70,
//             fontFamily: 'Montserrat',
//           ),
//         ),
//         buttonTheme: ButtonThemeData(
//           shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
//           buttonColor: Colors.amber,
//           splashColor: Colors.amberAccent,
//         ),
//         iconTheme: const IconThemeData(color: Colors.amberAccent),
//       ),
//       home: const HomeScreen(),
//     );
//   }
// }
//
// class HomeScreen extends StatefulWidget {
//   const HomeScreen({super.key});
//
//   @override
//   _HomeScreenState createState() => _HomeScreenState();
// }
//
// class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
//   double _points = 0.0;
//   static const double dailyLimit = 1000.0;
//   bool _showPlusOne = false;
//   late AnimationController _animationController;
//   late Animation<double> _animation;
//   late Animation<double> _bounceAnimation;
//
//   @override
//   void initState() {
//     super.initState();
//     _loadPoints();
//
//     _animationController = AnimationController(
//       duration: const Duration(seconds: 1),
//       vsync: this,
//     );
//
//     _animation = Tween<double>(begin: 0, end: -50).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.easeInOut,
//       ),
//     );
//
//     _bounceAnimation = Tween<double>(begin: 0, end: -10).animate(
//       CurvedAnimation(
//         parent: _animationController,
//         curve: Curves.bounceOut,
//       ),
//     );
//   }
//
//   Future<void> _loadPoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     setState(() {
//       _points = prefs.getDouble('points') ?? 0.0;
//     });
//   }
//
//   Future<void> _savePoints() async {
//     final prefs = await SharedPreferences.getInstance();
//     await prefs.setDouble('points', _points);
//   }
//
//   void _mineCoin() {
//     if (_points + 0.5 <= dailyLimit) {
//       setState(() {
//         _points += 0.5; // Increment points by 0.5 for mining action
//         _showPlusOne = true;
//       });
//       _animationController.reset();
//       _animationController.forward().then((_) {
//         setState(() {
//           _showPlusOne = false;
//         });
//       });
//       _savePoints(); // Save points after each increment
//     } else {
//       setState(() {
//         _points = dailyLimit; // Cap at the daily limit
//       });
//       _savePoints(); // Save points even if it's capped
//     }
//   }
//
//   @override
//   void dispose() {
//     _animationController.dispose();
//     super.dispose();
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final double screenWidth = MediaQuery.of(context).size.width;
//     final double logoSize = screenWidth * 0.5;
//
//     return Scaffold(
//       appBar: AppBar(
//         backgroundColor: Colors.transparent,
//         elevation: 0,
//         title: Row(
//           children: [
//             ClipOval(
//               child: Image.asset(
//                 'assets/mvtz_logo1.png',
//                 height: 40,
//                 width: 40,
//                 fit: BoxFit.cover,
//               ),
//             ),
//             const SizedBox(width: 10),
//             const Text(
//               'MVTZ Mining Bot',
//               style: TextStyle(
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//                 fontSize: 20,
//               ),
//             ),
//           ],
//         ),
//       ),
//       body: Container(
//         decoration: const BoxDecoration(
//           gradient: LinearGradient(
//             colors: [Color(0xFF004D40), Color(0xFF00796B)], // Dark Green Gradient
//             begin: Alignment.topLeft,
//             end: Alignment.bottomRight,
//           ),
//         ),
//         padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
//         child: Column(
//           crossAxisAlignment: CrossAxisAlignment.center,
//           children: [
//             GestureDetector(
//               onTap: _mineCoin,
//               child: Stack(
//                 alignment: Alignment.center,
//                 children: [
//                   CircleAvatar(
//                     radius: logoSize / 2,
//                     backgroundColor: Colors.black87, // Circle background color
//                     child: ClipOval(
//                       child: Image.asset(
//                         'assets/mvtz_logo.png',
//                         width: logoSize,
//                         height: logoSize,
//                         fit: BoxFit.contain,
//                       ),
//                     ),
//                   ),
//                   if (_showPlusOne)
//                     Positioned(
//                       bottom: _animation.value + _bounceAnimation.value,
//                       child: const Text(
//                         '+0.5',
//                         style: TextStyle(
//                           color: Colors.yellow,
//                           fontSize: 30,
//                           fontWeight: FontWeight.bold,
//                           shadows: [
//                             Shadow(
//                               blurRadius: 10,
//                               color: Colors.black,
//                               offset: Offset(0, 2),
//                             ),
//                           ],
//                         ),
//                       ),
//                     ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Points Display with daily limit info
//             Container(
//               padding: const EdgeInsets.all(20.0),
//               decoration: BoxDecoration(
//                 color: Colors.black87,
//                 borderRadius: BorderRadius.circular(15),
//                 boxShadow: const [
//                   BoxShadow(
//                     color: Colors.black54,
//                     offset: Offset(0, 4),
//                     blurRadius: 5,
//                   ),
//                 ],
//               ),
//               child: Row(
//                 mainAxisAlignment: MainAxisAlignment.center,
//                 children: [
//                   Text(
//                     'Points: $_points / $dailyLimit', // Display current points with daily limit
//                     style: const TextStyle(
//                       color: Colors.yellow,
//                       fontSize: 28,
//                       fontFamily: 'Montserrat',
//                       fontWeight: FontWeight.bold,
//                     ),
//                   ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//
//             // Options Display
//             Expanded(
//               child: GridView.count(
//                 crossAxisCount: 2,
//                 crossAxisSpacing: 20,
//                 mainAxisSpacing: 20,
//                 childAspectRatio: 1.2,
//                 padding: const EdgeInsets.all(10.0),
//                 children: [
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/task.png',
//                     label: 'Task',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const TaskScreen()),
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/mining.png', // Updated icon for Games
//                     label: 'Games', // Updated label for Games
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const GamesScreen()), // Updated route for Games screen
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/roadmap.png',
//                     label: 'Roadmap',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const RoadmapScreen()), // Navigate to RoadmapScreen
//                       );
//                     },
//                   ),
//                   _buildOption(
//                     context,
//                     imagePath: 'assets/icons/referral.png',
//                     label: 'Referral',
//                     onPressed: () {
//                       Navigator.push(
//                         context,
//                         MaterialPageRoute(builder: (context) => const ReferralScreen()),
//                       );
//                     },
//                   ),
//                 ],
//               ),
//             ),
//             const SizedBox(height: 5),
//           ],
//         ),
//       ),
//     );
//   }
//
//   Widget _buildOption(BuildContext context,
//       {required String imagePath,
//         required String label,
//         required VoidCallback onPressed}) {
//     return GestureDetector(
//       onTap: onPressed,
//       child: Container(
//         decoration: BoxDecoration(
//           gradient: const LinearGradient(
//             colors: [Color(0xFFDDCB11), Color(0xFFB5B5B5)], // Softer Yellow to Black Gradient
//             begin: Alignment.topLeft,
//             end: Alignment.bottomRight,
//           ),
//           borderRadius: BorderRadius.circular(15),
//           boxShadow: const [
//             BoxShadow(
//               color: Colors.black54,
//               offset: Offset(0, 4),
//               blurRadius: 5,
//             ),
//           ],
//         ),
//         child: Column(
//           mainAxisAlignment: MainAxisAlignment.center,
//           children: [
//             Image.asset(
//               imagePath,
//               height: 60,
//               width: 60,
//             ),
//             const SizedBox(height: 8),
//             Text(
//               label,
//               style: const TextStyle(
//                 color: Colors.black,
//                 fontSize: 20,
//                 fontFamily: 'Montserrat',
//                 fontWeight: FontWeight.bold,
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
// }